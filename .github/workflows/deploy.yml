name: Deploy to Production (Windows Self‑Hosted)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy-production
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  deploy:
    runs-on:
      - self-hosted
      - windows
      - nioxtec
    timeout-minutes: 30
    steps:
      - name: Preflight – PowerShell policy
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      - name: Despliegue vía tarea programada (fallback a script)
        shell: powershell
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          # Intentar ejecutar tarea si existe; si falla por permisos o inexistente, ejecutar script directo
          cmd.exe /c 'schtasks /Query /TN "Nioxtec Deploy CI" >NUL 2>&1'
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Tarea encontrada: ejecutando 'Nioxtec Deploy CI'"
            cmd.exe /c 'schtasks /Run /TN "Nioxtec Deploy CI"'
          } else {
            Write-Host "Tarea no disponible o acceso denegado: ejecutando script directo (inline)"
            $ErrorActionPreference = 'Continue'
            function Log([string]$m){ Write-Host ("[{0}] {1}" -f (Get-Date -Format 'yyyy-MM-dd HH:mm:ss'), $m) }
            $backendStopped = $false
            $frontendStopped = $false
            # 1) Build primero; no paramos servicios aún para no cortar producción
            try {
              Log 'Actualizando código backend con DEPLOY_TOKEN'
              Set-Location 'C:\Nioxtec\Nioxtec_Facturer'
              git config --global --add safe.directory 'C:/Nioxtec/Nioxtec_Facturer'
              $repoUrl = "https://x-access-token:$env:DEPLOY_TOKEN@github.com/AngelMazur/Nioxtec_Facturer.git"
              git remote set-url origin $repoUrl
              git fetch origin main --prune
              git reset --hard origin/main
              if (Test-Path .\.venv310\Scripts\pip.exe) { .\.venv310\Scripts\pip.exe install -r requirements.txt }
            } catch { Log "Backend update error: $($_.Exception.Message)" }
            try {
              Log 'npm ci && build frontend'
              Set-Location 'C:\Nioxtec\Nioxtec_Facturer\frontend'
              npm ci
              $env:VITE_API_BASE = 'https://api.nioxtec.es'
              npm run build
            } catch { Log "Frontend build error: $($_.Exception.Message)" }
            # 2) Si el build fue OK (no hubo errores críticos), reiniciamos servicios de forma rápida
            try { Log 'Reiniciando backend'; schtasks /End /TN "Nioxtec Backend" 2>$null | Out-Null; $backendStopped=$true } catch {}
            try { Log 'Reiniciando frontend'; schtasks /End /TN "Nioxtec Frontend" 2>$null | Out-Null; $frontendStopped=$true } catch {}
            try { if ($backendStopped) { schtasks /Run /TN "Nioxtec Backend" 2>$null | Out-Null; Log 'Backend arrancado' } } catch {}
            try { if ($frontendStopped) { schtasks /Run /TN "Nioxtec Frontend" 2>$null | Out-Null; Log 'Frontend arrancado' } } catch {}
            # 3) Pase lo que pase, si algo se paró, se vuelve a arrancar
            finally {
              try { schtasks /Run /TN "Nioxtec Backend" 2>$null | Out-Null } catch {}
              try { schtasks /Run /TN "Nioxtec Frontend" 2>$null | Out-Null } catch {}
            }
          }

      - name: Health‑check API
        shell: powershell
        run: |
          try {
            $code = (Invoke-WebRequest https://api.nioxtec.es/health -UseBasicParsing -TimeoutSec 10).StatusCode
            if ($code -ne 200) { Write-Error "API health returned $code"; exit 1 }
          } catch { Write-Error $_.Exception.Message; exit 1 }


