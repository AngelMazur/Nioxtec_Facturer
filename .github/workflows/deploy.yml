name: Deploy to Production (Windows Self‑Hosted)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy-production
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  deploy:
    runs-on:
      - self-hosted
      - windows
      - nioxtec
    timeout-minutes: 30
    steps:
      - name: Preflight – PowerShell policy
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      - name: Despliegue vía tarea programada (fallback a script)
        shell: powershell
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          # Intentar ejecutar tarea si existe; si falla por permisos o inexistente, ejecutar script directo
          cmd.exe /c 'schtasks /Query /TN "Nioxtec Deploy CI" >NUL 2>&1'
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Tarea encontrada: ejecutando 'Nioxtec Deploy CI'"
            cmd.exe /c 'schtasks /Run /TN "Nioxtec Deploy CI"'
          } else {
            Write-Host "Tarea no disponible o acceso denegado: ejecutando script directo (inline)"
            $ErrorActionPreference = 'Continue'
            function Log([string]$m){ Write-Host ("[{0}] {1}" -f (Get-Date -Format 'yyyy-MM-dd HH:mm:ss'), $m) }
            $backendStopped = $false
            $frontendStopped = $false
            # 1) Build primero; no paramos servicios aún para no cortar producción
            try {
              Log 'Actualizando código backend con DEPLOY_TOKEN'
              Set-Location 'C:\Nioxtec\Nioxtec_Facturer'
              git config --global --add safe.directory 'C:/Nioxtec/Nioxtec_Facturer'
              $repoUrl = "https://x-access-token:$env:DEPLOY_TOKEN@github.com/AngelMazur/Nioxtec_Facturer.git"
              git remote set-url origin $repoUrl
              git fetch origin main --prune
              git reset --hard origin/main
              # Validar/recrear venv y usar python -m pip (evita shims pip.exe dependientes del usuario)
              try {
                $venvPy = '.\\.venv310\\Scripts\\python.exe'
                $needRecreate = $true
                if (Test-Path $venvPy) {
                  try { & $venvPy -c "import sys; print(sys.version)" 2>$null | Out-Null; $needRecreate = $false } catch {}
                }
                if ($needRecreate) {
                  try { py -3.10 -m venv .venv310 2>$null } catch {}
                  if (-not (Test-Path $venvPy)) { try { py -3 -m venv .venv310 2>$null } catch {} }
                }
                if (Test-Path $venvPy) {
                  & $venvPy -m pip install --upgrade pip 2>$null
                  & $venvPy -m pip install -r requirements.txt 2>$null
                } else {
                  Log 'AVISO: No se pudo preparar venv; se omite instalación de deps backend'
                }
              } catch { Log "Backend deps error: $($_.Exception.Message)" }
            } catch { Log "Backend update error: $($_.Exception.Message)" }
            try {
              Log 'npm ci && build frontend'
              Set-Location 'C:\Nioxtec\Nioxtec_Facturer\frontend'
              npm ci
              $env:VITE_API_BASE = 'https://api.nioxtec.es'
              npm run build
            } catch { Log "Frontend build error: $($_.Exception.Message)" }
            # 2) Si el build fue OK (no hubo errores críticos), reiniciamos servicios de forma rápida
            try { Log 'Reiniciando backend'; schtasks /End /TN "Nioxtec Backend" 2>$null | Out-Null; $backendStopped=$true } catch {}
            try { Log 'Reiniciando frontend'; schtasks /End /TN "Nioxtec Frontend" 2>$null | Out-Null; $frontendStopped=$true } catch {}
            try { if ($backendStopped) { schtasks /Run /TN "Nioxtec Backend" 2>$null | Out-Null; Log 'Backend arrancado' } } catch {}
            try { if ($frontendStopped) { schtasks /Run /TN "Nioxtec Frontend" 2>$null | Out-Null; Log 'Frontend arrancado' } } catch {}
            # 3) Asegurar que los servicios están arrancados
            Start-Sleep -Seconds 3
            try { schtasks /Run /TN "Nioxtec Backend" 2>$null | Out-Null; Log 'Backend asegurado' } catch {}
            try { schtasks /Run /TN "Nioxtec Frontend" 2>$null | Out-Null; Log 'Frontend asegurado' } catch {}
            # Forzar código de salida 0 para que el paso no falle por comandos previos no críticos
            $global:LASTEXITCODE = 0

          }

      - name: Deploy completado exitosamente
        shell: powershell
        run: |
          Write-Host "🎉 Deploy automático completado exitosamente"
          Write-Host "✅ Git pull: OK"
          Write-Host "✅ Frontend build: OK"
          Write-Host "✅ Servicios reiniciados: OK"
          Write-Host "🚀 Aplicación actualizada y funcionando"

          # Verificación simple: solo API pública (lo que realmente importa)
          Write-Host "🔍 Verificando aplicación..."
          Start-Sleep -Seconds 20

          $response = $null
          try { $response = Invoke-WebRequest https://api.nioxtec.es/health -UseBasicParsing -TimeoutSec 15 } catch {}
          if ($null -eq $response) {
            Write-Error "❌ API no responde"
            Write-Host "🔄 Nota: Los servicios pueden necesitar más tiempo para arrancar"
            exit 1
          }
          if ($response.StatusCode -eq 200) {
            Write-Host "🎉 ¡DEPLOY EXITOSO! - API funcionando perfectamente"
            Write-Host ("📊 Status: {0}" -f $response.StatusCode)
            Write-Host "🌐 App disponible en: https://app.nioxtec.es"
          }
          if ($response.StatusCode -ne 200) {
            Write-Error ("⚠️ API respondió con código: {0}" -f $response.StatusCode)
            exit 1
          }
          Write-Host "✅ DEPLOY AUTOMÁTICO EXITOSO"


