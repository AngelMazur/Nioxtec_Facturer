#!/usr/bin/env python3
"""
Script de diagn√≥stico para el frontend en servidor remoto
Simula las peticiones que hace el frontend para identificar el problema
"""

import requests
import json
import os
from pathlib import Path

def test_backend_connection():
    """Probar la conexi√≥n al backend"""
    print("üîç Probando conexi√≥n al backend...")
    
    # URLs a probar
    urls_to_test = [
        "http://localhost:5001/api/contracts/templates",
        "http://127.0.0.1:5001/api/contracts/templates",
        "http://localhost:5000/api/contracts/templates",
        "http://127.0.0.1:5000/api/contracts/templates"
    ]
    
    for url in urls_to_test:
        try:
            print(f"  Probando: {url}")
            response = requests.get(url, timeout=5)
            print(f"    Status: {response.status_code}")
            if response.status_code == 401:
                print("    ‚úÖ Backend responde (requiere autenticaci√≥n)")
                return True
            elif response.status_code == 200:
                print("    ‚úÖ Backend responde correctamente")
                return True
            else:
                print(f"    ‚ö†Ô∏è  Respuesta inesperada: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("    ‚ùå No se puede conectar")
        except Exception as e:
            print(f"    ‚ùå Error: {e}")
    
    return False

def check_frontend_config():
    """Verificar configuraci√≥n del frontend"""
    print("\nüîç Verificando configuraci√≥n del frontend...")
    
    # Verificar archivo de configuraci√≥n de Vite
    vite_config = Path("frontend/vite.config.js")
    if vite_config.exists():
        print("‚úÖ vite.config.js encontrado")
        with open(vite_config, 'r') as f:
            content = f.read()
            if "proxy" in content:
                print("‚úÖ Configuraci√≥n de proxy encontrada")
            else:
                print("‚ö†Ô∏è  No se encontr√≥ configuraci√≥n de proxy")
    else:
        print("‚ùå vite.config.js no encontrado")
    
    # Verificar variables de entorno
    env_file = Path("frontend/.env")
    if env_file.exists():
        print("‚úÖ .env encontrado")
        with open(env_file, 'r') as f:
            content = f.read()
            if "VITE_API_BASE" in content:
                print("‚úÖ VITE_API_BASE configurado")
            else:
                print("‚ö†Ô∏è  VITE_API_BASE no configurado")
    else:
        print("‚ö†Ô∏è  .env no encontrado")

def check_static_serving():
    """Verificar que los archivos est√°ticos se sirvan correctamente"""
    print("\nüîç Verificando archivos est√°ticos...")
    
    # Verificar que el directorio static est√© en el lugar correcto
    static_dir = Path("static")
    if static_dir.exists():
        print("‚úÖ Directorio static existe")
        
        # Verificar que las plantillas est√©n accesibles
        templates_dir = static_dir / "contracts" / "templates"
        if templates_dir.exists():
            print("‚úÖ Directorio de plantillas existe")
            
            # Contar archivos
            docx_files = list(templates_dir.glob("*.docx"))
            print(f"‚úÖ {len(docx_files)} plantillas DOCX encontradas")
            
            for docx_file in docx_files:
                print(f"  - {docx_file.name}")
        else:
            print("‚ùå Directorio de plantillas no existe")
    else:
        print("‚ùå Directorio static no existe")

def check_flask_config():
    """Verificar configuraci√≥n de Flask"""
    print("\nüîç Verificando configuraci√≥n de Flask...")
    
    # Verificar que app.py tenga la configuraci√≥n correcta
    app_py = Path("app.py")
    if app_py.exists():
        with open(app_py, 'r', encoding='utf-8') as f:
            content = f.read()
            
            # Verificar configuraci√≥n de archivos est√°ticos
            if "STATIC_FOLDER" in content:
                print("‚úÖ STATIC_FOLDER configurado")
            else:
                print("‚ùå STATIC_FOLDER no configurado")
            
            # Verificar rutas de contratos
            if "/api/contracts/templates" in content:
                print("‚úÖ Ruta de plantillas configurada")
            else:
                print("‚ùå Ruta de plantillas no configurada")
            
            # Verificar configuraci√≥n de CORS
            if "CORS" in content:
                print("‚úÖ CORS configurado")
            else:
                print("‚ùå CORS no configurado")

def main():
    """Funci√≥n principal"""
    print("üöÄ Diagn√≥stico del Frontend en Servidor Remoto")
    print("=" * 60)
    
    checks = [
        test_backend_connection,
        check_frontend_config,
        check_static_serving,
        check_flask_config
    ]
    
    all_passed = True
    for check in checks:
        if not check():
            all_passed = False
    
    print("\n" + "=" * 60)
    if all_passed:
        print("‚úÖ DIAGN√ìSTICO COMPLETADO - Revisar resultados arriba")
    else:
        print("‚ùå PROBLEMAS DETECTADOS - Revisar errores arriba")
    
    print("\nüí° POSIBLES SOLUCIONES:")
    print("1. Verificar que el backend est√© corriendo en el puerto correcto")
    print("2. Verificar configuraci√≥n de CORS en el backend")
    print("3. Verificar variables de entorno del frontend")
    print("4. Verificar que los archivos est√°ticos se sirvan correctamente")

if __name__ == "__main__":
    main()
